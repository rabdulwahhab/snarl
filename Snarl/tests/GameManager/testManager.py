import sys
import json
from Util import intifyTuple, whichBoardInLevel, isTileOnBoard
from Convert import convertJsonDungeon
from Types import *


"""
PLANNING SESSION:
Flow:
0. parse json
1. Take in data, convert it to dungeon
2. Init a manager-trace (MT)
3. Output an initial player vision to each player (Loop), add those updates to MT
4. Execute Moves
    a. we do the MOVE
    b. append the status (could be generated by acc on dungeon)
    bb. continue if invalid
    c. append the updates
5. When done, output complete status (may be able to use functions from testState)

Function wishlist:
- getPlayerVision()
- given a turn, outputs [ (name), (actor-move), (result) ]
- given a status, outputs [ (name), (player-update) ]


"Generally, I like test harnesses"
    - Saleha
"""


def main():
    try:
        # Read input
        inputJson = sys.stdin.read()

        # Parse json
        parsedJson = json.loads(inputJson.replace("\n", ""))
        jsonDungeon, playerName, jsonPoint = parsedJson
        jsonLevel = jsonDungeon["level"]
        jsonPlayers = jsonDungeon["players"]
        jsonEnemies = jsonDungeon["adversaries"]
        jsonExitLocked = jsonDungeon["exit-locked"]
        game = convertJsonDungeon(jsonLevel, jsonPlayers, jsonEnemies,
        jsonExitLocked)

        # Validate
        if playerName not in game.players:
            status = MoveStatus.PLAYERINVALID
        else:
            status = arbitraryMove(intifyTuple(jsonPoint), game)
            if status == status.NONE:
                status = getSuccessStatus(intifyTuple(jsonPoint), game)

                # Output
                output = buildOutput(status, playerName, jsonPoint, jsonDungeon)
                print(json.dumps(output))
            except json.JSONDecodeError:
                print("Malformed input.")
                sys.exit(1)
            except KeyboardInterrupt:
                print("Exiting...")
                sys.exit(0)


                if __name__ == '__main__':
                    main()
